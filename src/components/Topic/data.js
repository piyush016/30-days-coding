export const datatopic = [
  {
    id: 1,
    dsatopic: "Array",
    text: "Array is like a treasure chest where you store all your goodies, but sometimes you forget where you put things and spend ages searching for them!",
    link: "https://www.geeksforgeeks.org/array-data-structure/",
    url: "/array",
  },
  {
    id: 2,
    dsatopic: "Linked-List",
    text: "Linked list is like a chain of friends holding hands. If someone lets go, it's chaos, but at least you can add new friends without rearranging everyone!",
    link: "https://www.geeksforgeeks.org/data-structures/linked-list/",
    url: "/linked-list",
  },
  {
    id: 3,
    dsatopic: "Recursion",
    text: "Recursion is like asking someone to define 'infinity'. You'll keep asking forever... or until you run out of memory!",
    link: "https://www.geeksforgeeks.org/introduction-to-recursion-data-structure-and-algorithm-tutorials/",
    url: "/recursion",
  },
  {
    id: 4,
    dsatopic: "Backtracking",
    text: "Backtracking is like trying to solve a maze blindfolded. You make a move, realize it's wrong, and try again from where you started... with a headache!",
    link: "https://www.geeksforgeeks.org/backtracking-algorithms/",
    url: "/backtracking",
  },
  {
    id: 5,
    dsatopic: "Binary Search",
    text: "Binary search is like playing 'Guess the Number' where you always halve the range of guesses. If only finding your keys was this efficient!",
    link: "https://www.geeksforgeeks.org/binary-search/",
    url: "/binarysearch",
  },
  {
    id: 6,
    dsatopic: "Heaps",
    text: "Heaps are like a chaotic lineup at a buffet – the biggest item gets served first! Just hope you're not behind the person who loves mashed potatoes!",
    link: "https://www.geeksforgeeks.org/heap-data-structure/",
    url: "/heaps",
  },
  {
    id: 7,
    dsatopic: "Stack and Queue",
    text: "Stack is like Jenga – keep piling, take from the top. Queue is like a roller coaster line – wait your turn, no cutting!",
    link: "https://www.geeksforgeeks.org/difference-between-stack-and-queue-data-structures/",
    url: "/stack-queue",
  },
  {
    id: 8,
    dsatopic: "String",
    text: "String is like a rubber band – flexible, stretchy, and always tied up in knots when you least expect it!",
    link: "https://www.geeksforgeeks.org/string-data-structure/",
    url: "/string",
  },
  {
    id: 9,
    dsatopic: "Binary Tree",
    text: "Binary tree is like a family tree, but with only two children per parent. Less drama, more balance... usually!",
    link: "https://www.geeksforgeeks.org/binary-tree-data-structure/",
    url: "/binarytree",
  },
  {
    id: 10,
    dsatopic: "Binary Search Tree",
    text: "Binary Search Tree: Mixing Binary tree and Binary search is like organizing your closet by color and size simultaneously – brilliant or a complete mess!",
    link: "https://www.geeksforgeeks.org/binary-search-tree-data-structure/",
    url: "/binarysearchtree",
  },
  {
    id: 11,
    dsatopic: "Graph",
    text: "Graph: Let's get lost in different routes! Graphs are like roadmaps where you choose between the scenic route or getting stuck in traffic.",
    link: "https://www.geeksforgeeks.org/graph-data-structure-and-algorithms/",
    url: "/graph",
  },
  {
    id: 12,
    dsatopic: "Dynamic Programming",
    text: "Dynamic Programming: It's like playing Tetris – fitting pieces together perfectly to clear lines and score big!",
    link: "https://www.geeksforgeeks.org/dynamic-programming/",
    url: "/dp",
  },
  {
    id: 13,
    dsatopic: "Trie",
    text: "Trie: Hard to explain. It's like a word search puzzle – adding letters until you find the right word, or run out of patience!",
    link: "https://www.geeksforgeeks.org/trie-insert-and-search/",
    url: "/trie",
  },
];
